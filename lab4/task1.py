import numpy as np
import pandas as pd

# 1. Сгенерировать случайным образом массив numpy из 1000
# значений нормально распределенной случайной величины
# (numpy.random.normal) с мат. ожиданием M = 1.0 и
# стандартным отклонением s = 1.0. Преобразовать его в объект Series.
M = 1.0
s = 1.0
randArr = np.random.normal(M, s, 1000)
series = pd.Series(randArr)

# 2. Вычислить, какая доля всех значений находится в диапазоне (M-s; M+s).
rangeArr = series[(series > M - s) & (series < M + s)]
print(f"Доля всех значений в диапазоне (M-s; M+s) = {(len(rangeArr) / 1000) * 100}", "%")
print("\n")
# 3. Вычислить, какая доля всех значений находится в диапазоне (M-3s; M+s)
rangeArr = series[(series > M - 3 * s) & (series < M + 3 * s)]
print(f"Доля всех значений в диапазоне (M-3s; M+3s) = {(len(rangeArr) / 1000) * 100}", "%")
print("\n")
# 4. Заменить каждое значение x в серии на его квадратный корень
# (numpy.sqrt(x)). Результат записать в новый объект Series.
# Почему возникает предупреждение, и что происходит с теми
# значениями, для которых возникает предупреждение?
sqrtSeries = series.apply(np.sqrt) #Если число отрицательное - заменяется на NaN

# 5. Посчитать среднее арифметическое для получившихся значений.
# Отсутствующие значения (NaN) учитываться не должны.
avg = sqrtSeries.mean()
print(f"Среднее арифм. = {avg}")
print("\n")
# 6. На основе двух объектов Series (исходного и полученного на шаге 4)
# создать DataFrame с двумя столбцами. Названия (явные индексы) для столбцов:
# «number» и «root» соответственно. Явные индексы для строк не задавать.
# Вывести первые 6 строк из созданного датафрейма.
table = pd.DataFrame({'number': series, 'root': sqrtSeries})
print(table.head(6))
print("\n")
# 7. С помощью функции query найти в датафрейме записи, в которых
# значение квадратного корня находится в диапазоне от 1.8 до 1.9.
# Вывести результат.
res = table.query("1.8 <= root <= 1.9")
print(res)